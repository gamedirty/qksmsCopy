/*
 * Copyright (C) 2017 Moez Bhatti <moez.bhatti@gmail.com>
 *
 * This file is part of QKSMS.
 *
 * QKSMS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QKSMS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QKSMS.  If not, see <http://www.gnu.org/licenses/>.
 */
apply plugin: 'com.android.application'
apply plugin: 'realm-android' // Realm needs to be before Kotlin or the build will fail
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 32
    buildToolsVersion "29.0.3"
    flavorDimensions "analytics"

    defaultConfig {
        applicationId "com.moez.QKSMS"
        minSdkVersion 23
        targetSdkVersion 32
        versionCode 2218
        versionName "3.9.4"
        setProperty("archivesBaseName", "QKSMS-v${versionName}")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        setProperty("archivesBaseName", "QKSMS-v${versionName}")
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
        withAnalytics { dimension "analytics" }
        noAnalytics { dimension "analytics" }
    }

    if (System.getenv("CI") == "true") {
        signingConfigs.release.storeFile = file("../keystore")
        signingConfigs.release.storePassword = System.getenv("keystore_password")
        signingConfigs.release.keyAlias = System.getenv("key_alias")
        signingConfigs.release.keyPassword = System.getenv("key_password")
    }
}

androidExtensions {
    experimental = true
}

configurations {
    noAnalyticsDebug
    noAnalyticsRelease
    withAnalyticsDebug
    withAnalyticsRelease
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    // lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.4.1"
    implementation "androidx.activity:activity-ktx:1.4.0"

    // androidx
    implementation "androidx.appcompat:appcompat:1.4.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.3"
    implementation "androidx.core:core-ktx:1.7.0"
    implementation "androidx.emoji:emoji-appcompat:1.1.0"
    implementation "androidx.viewpager2:viewpager2:1.1.0-alpha01"
    implementation "com.google.android.material:material:1.5.0"

    // conductor
    implementation "com.bluelinelabs:conductor:3.1.4"
    implementation "com.bluelinelabs:conductor-archlifecycle:3.1.4"

    // glide
    implementation "com.github.bumptech.glide:glide:4.13.1"
    kapt "com.github.bumptech.glide:compiler:4.13.1"

    // exoplayer
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    implementation("com.google.android.exoplayer:exoplayer-ui:$exoplayer_version", {
        exclude group: "com.android.support", module: "support-media-compat"
    })

    // rxbinding
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:2.2.0"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:2.2.0"

    // autodispose
    implementation "com.uber.autodispose:autodispose-android-archcomponents:1.4.0"
    implementation "com.uber.autodispose:autodispose-android-archcomponents-test:1.4.0"
    implementation "com.uber.autodispose:autodispose-android:1.4.0"
    implementation "com.uber.autodispose:autodispose:$autodispose_version"
    implementation "com.uber.autodispose:autodispose-lifecycle:$autodispose_version"

    // dagger
    implementation "com.google.dagger:dagger:2.41"
    implementation "com.google.dagger:dagger-android-support:2.41"
    kapt "com.google.dagger:dagger-compiler:2.41"
    kapt "com.google.dagger:dagger-android-processor:2.41"
    compileOnly "javax.annotation:jsr250-api:1.0"

    // ezvcard
    implementation('com.googlecode.ez-vcard:ez-vcard:0.11.3', {
        exclude group: "org.jsoup", module: "jsoup"
        exclude group: "org.freemarker", module: "freemarker"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
    })

    // realm
    implementation("io.realm:android-adapters:$realm_adapters_version") { transitive = false }
    kapt "io.realm:realm-annotations:$realm_version"
    kapt "io.realm:realm-annotations-processor:$realm_version"

    // rxjava
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version"
    implementation "com.uber.rxdogtag:rxdogtag:$rxdogtag_version"
    implementation "com.uber.rxdogtag:rxdogtag-autodispose:$rxdogtag_version"


    // testing
    androidTestImplementation("androidx.test.espresso:espresso-core:3.4.0", {
        exclude group: "com.android.support", module: "support-annotations"
    })
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    testImplementation "androidx.test:runner:1.4.0"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"

    // moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    debugImplementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    kaptRelease "com.squareup.moshi:moshi-kotlin-codegen:$moshi_version"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactive:$coroutines_version"

    implementation "com.github.chrisbanes:PhotoView:2.3.0"
    implementation "com.f2prateek.rx.preferences2:rx-preferences:2.0.1"
    implementation "com.google.android:flexbox:0.3.1"
    implementation "com.jakewharton.timber:timber:5.0.1"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "me.leolin:ShortcutBadger:1.1.22"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(":android-smsmms")
    implementation project(":common")
    implementation project(':data')
    implementation project(':domain')

    withAnalyticsImplementation 'com.google.firebase:firebase-crashlytics:18.1.0'
    withAnalyticsImplementation "com.android.billingclient:billing:4.0.0"
    withAnalyticsImplementation "com.android.billingclient:billing-ktx:4.0.0"
    noAnalyticsDebug project(path: ':data', configuration: 'noAnalyticsDebug')
    noAnalyticsRelease project(path: ':data', configuration: 'noAnalyticsRelease')
    withAnalyticsDebug project(path: ':data', configuration: 'withAnalyticsDebug')
    withAnalyticsRelease project(path: ':data', configuration: 'withAnalyticsRelease')
}

if (getGradle().getStartParameter().getTaskRequests().toString().contains("WithAnalytics")) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}
